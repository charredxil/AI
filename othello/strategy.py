#
# Charlie Gunn
from collections import namedtuple
import sys

# Structs
Board = namedtuple('Board', 'p o discs')
Entry = namedtuple('Entry', 'value flag depth move')
Param = namedtuple('Param', 'check cut a b s')

# Masks
full = 0xFFFFFFFFFFFFFFFF
noedge = 0x7e7e7e7e7e7e7e7e
corners = 0x8100000000000081
xsq = 0x0042000000004200
csq = 0x4281000000008142
top = 0x00000000000000FF
left = 0x0101010101010101
right = 0x8080808080808080
bottom = 0xFF00000000000000
topbot = top | bottom
leftright = left | right
edges = topbot | leftright

# Constants
LOWER, EXACT, UPPER = -1, 0, 1
PASS = -1
INF = float("inf")

# I/O
def string_to_board(s, xmove, bchars = 'Xx', wchars = 'Oo'):
    b = sum(1 << e if c in bchars else 0 for e, c in enumerate(s))
    w = sum(1 << e if c in wchars else 0 for e, c in enumerate(s))
    p, o = (b, w) if xmove else (w, b)
    return Board(p, o, 64-s.count('.'))
def toint(x):
    return x.bit_length()-1
def interpret_input():
    boardstr = xmove = None
    for s in sys.argv[1:]:
        if len(s) == 64: boardstr = s
        elif len(s) == 1: xmove = s in 'Xx'
    if boardstr is None: boardstr = '...........................OX......XO...........................'
    if xmove is None: xmove = boardstr.count('.') % 2 == 0
    return string_to_board(boardstr, xmove), xmove

# Getting data from a string
def get_mpc_data(string):
    d_ht_param = [{} for _ in range(65)]
    cur_d = None
    ls = string.splitlines()
    for l in ls:
        toks = l.split()
        if len(toks) == 1:
            cur_d = int(toks[0])
        elif len(toks) == 5:
            ht, chk, a, b, s = tuple(toks)
            cut = 1.5 if cur_d < 36 else 2
            d_ht_param[cur_d][int(ht)] = Param(int(chk), cut, float(a), float(b), float(s))
    return d_ht_param
def get_heuristic_data(feats, string):
    heur = [None for _ in range(64)] + [score]
    lines = string.splitlines()
    for line in lines:
        toks = line.split()
        if len(toks) != len(feats)+1: continue
        weights = tuple(map(int, toks[1:]))
        int(toks[0])
        heur[int(toks[0])] = combine(feats, weights)
    current = None
    for ix in range(len(heur)-2, -1, -1):
        if heur[ix] is None: heur[ix] = current
        else: current = heur[ix]
    return (lambda b: heur[b.discs](b))

# Board manipulation
def board_pass(b):
    return Board(b.o, b.p, b.discs)
def board_next(b, x, flips=None):
    if x == PASS: return board_pass(b)
    flips = get_flips(b, x) if flips is None else flips
    p = b.p ^ (flips | x)
    o = b.o ^ flips
    return Board(o, p, b.discs+1)

# Bit manipulation
flipfunc = None
def get_flips(b, x):
    xpos = x.bit_length()-1
    return flipfunc[xpos](b.p, b.o)
def get_moves(b):
    mask = b.o & noedge
    return (get_moves_dir(b.p, 1, mask)| get_moves_dir(b.p, 8, b.o) | get_moves_dir(b.p, 7, mask) | get_moves_dir(b.p, 9, mask)) & (full ^ (b.p|b.o))
def get_moves_dir(p, dr, mask):
    dr2 = dr << 1
    dr4 = dr << 2
    flip_l  = p | (mask & (p << dr));    flip_r  = p | (mask & (p >> dr))
    mask_l  = mask & (mask << dr);       mask_r  = mask & (mask >> dr)
    flip_l |= mask_l & (flip_l << dr2);  flip_r |= mask_r & (flip_r >> dr2)
    mask_l &= (mask_l << dr2);           mask_r &= (mask_r >> dr2)
    flip_l |= mask_l & (flip_l << dr4);  flip_r |= mask_r & (flip_r >> dr4)
    return ((flip_l & mask) << dr) | ((flip_r & mask) >> dr)
def popcnt(x):
    x -= (x >> 1) & 0x5555555555555555
    x = (x & 0x3333333333333333) + ((x >> 2) & 0x3333333333333333)
    x = (x + (x >> 4)) & 0x0f0f0f0f0f0f0f0f
    return ((x * 0x0101010101010101) & 0xffffffffffffffff ) >> 56
def popcnt_low(x):
    count = 0
    while x:
        b = x & -x
        x ^= b
        count += 1
    return count
def bits(n):
    while n:
        b = n & -n
        yield b
        n ^= b

# Features & Heuristic Misc.
def score(b):
    return 100*(popcnt(b.p) - popcnt(b.o))
def f_discs(b):
    pd = popcnt(b.p)
    od = popcnt(b.o)
    return normalize(pd, od)
def f_moves(b):
    pm = popcnt(get_moves(b))
    om = popcnt(get_moves(board_pass(b)))
    return normalize(pm, om)
def f_corners(b):
    pc = popcnt_low(b.p & corners)
    oc = popcnt_low(b.o & corners)
    return normalize(pc, oc)
def f_xsquares(b):
    px = badxs(b.p)
    ox = badxs(b.o)
    return normalize(px, ox)
def badxs(p):
    notc = (p & corners) ^ corners
    px = p & xsq
    notcx = (notc << 9) | (notc << 7) | (notc >> 9) | (notc >> 7)
    return popcnt_low(notcx & px)
def f_csquares(b):
    pc = badcs(b.p)
    oc = badcs(b.o)
    return normalize(pc, oc)
def badcs(p):
    notco = (p & corners) ^ corners
    notco_nl = notco & ~left
    notco_nr = notco & ~right
    notco_c = (notco_nr << 1) | (notco_nl >> 1) | (notco >> 8) | (notco << 8)
    return popcnt_low(notco_c & p)
def f_parity(b):
    return 64 if (b.discs % 2) else -64
def f_frontier(b):
    empty = full ^ (b.p|b.o)
    pfr = popcnt(neighbors(b.p) & empty)
    ofr = popcnt(neighbors(b.o) & empty)
    return normalize(pfr, ofr)
def neighbors(p):
    p_nl = p & ~left
    p_nr = p & ~right
    return (p << 8) | (p >> 8) | (p_nr << 1) | (p_nl >> 1) | (p_nl << 7) | (p_nr >> 7) | (p_nl >> 9) | (p_nr << 9)
def f_stable_nc(b):
    ps = popcnt(stable_pieces(b.p, depth=4) & (~corners))
    os = popcnt(stable_pieces(b.o, depth=4) & (~corners))
    return normalize(ps, os)
def stable_pieces(p, depth=-1):
    iters = 0
    stable = 0
    while iters != depth:
        newstable = (p & some_stable(stable, topbot, 8) & some_stable(stable, leftright, 1) & some_stable(stable, edges, 7) & some_stable(stable, edges, 9)) | stable
        if newstable == stable: break
        stable = newstable
        iters += 1
    return stable
def some_stable(stable, pre, delta):
    return (stable >> delta) | (stable << delta) | pre
def normalize(a, b):
    return 64*(a-b)/(a+b) if (a+b) else 0
def combine(funcs, weights):
    totweights = sum(abs(w) for w in weights)
    weights = [w/totweights for w in weights]
    def h(b):
        tot = 0
        for f, w in zip(funcs, weights):
            tot += w*f(b)
        return tot
    return h

# Searching
h_current = None
ttable = None
def search(b, depthlim=INF, retval=False):
    global ttable
    ttable = {}
    depth = 0
    depthlim = min(depthlim, 65-b.discs)
    while True:
        depth += 1
        val, move = pvs(b, depth, -INF, INF, retmove=True)
        yield (val, move) if retval else move
        if depth >= depthlim: break

mpc_data = None
h_current = None
def pvs(b, depth, alpha, beta, passes=0, retmove=False):
    entry = ttable.get(b)
    if entry and entry.depth >= depth:
        if entry.flag == LOWER:
            alpha = max(alpha, entry.value)
        if entry.flag == UPPER:
            beta = min(beta, entry.value)
        if entry.flag == EXACT or alpha >= beta:
            return (entry.value, entry.move) if retmove else entry.value

    if passes == 2:
        return score(b)
    if depth == 0:
        return h_current(b)

    if mpc_data[b.discs] and depth in mpc_data[b.discs] and not retmove:
        p = mpc_data[b.discs][depth]
        if beta != INF:
            bound = round((p.cut*p.s + beta - p.b)/p.a)
            if pvs(b, p.check, bound-1, bound) >= bound:
                return beta
        if alpha != -INF:
            bound = round((-p.cut*p.s + alpha - p.b)/p.a)
            if pvs(b, p.check, bound, bound+1) <= bound:
                return alpha

    al, be = alpha, beta
    bestmove, bestval = None, -INF
    for ix, (move, child) in enumerate(ordered_moves(b)):
        n_passes, n_depth = (passes+1, depth) if move == PASS else (0, depth-1)
        v = -pvs(child, n_depth, -be, -al, passes=n_passes)
        if al < v < beta and ix > 0:
            v = -pvs(child, n_depth, -beta, -alpha, passes=n_passes)
        if v > bestval:
            bestval, bestmove = v, move
        al = max(al, v)
        if al >= beta: break
        be = al + 1

    flag = None
    if bestval <= alpha: flag = UPPER
    elif bestval >= beta: flag = LOWER
    else: flag = EXACT
    ttable[b] = Entry(bestval, flag, depth, bestmove)
    return (bestval, bestmove) if retmove else bestval

h_order = None
def ordered_moves(b):
    moves = get_moves(b)
    if not moves: return [(PASS, board_pass(b))]
    entry = ttable.get(b)
    tmove = entry.move if entry else None
    move_child = [(x, board_next(b, x)) for x in bits(moves) if x != tmove]
    move_child.sort(key=lambda t: h_order(t[1]))
    if tmove is not None:
        return [(tmove, board_next(b, tmove)), *move_child]
    return move_child

class Strategy:
    def best_strategy(self, board, player, best_move, still_running):
        xmove = (player == "@")
        bstr = ''.join(board).replace('?', '')
        b = string_to_board(bstr, xmove, bchars='@')
        moves = search(b)
        for mv in moves:
            mv = toint(mv)
            best_move.value = 11 + (mv//8)*10 + (mv%8)

def main():
    b, xmove = interpret_input()
    moves = search(b)
    for mv in moves:
        print(toint(mv))

# Setting global variables (h_current, mpc_data)
features = (f_discs, f_moves, f_frontier, f_stable_nc, f_corners, f_xsquares, f_csquares, f_parity)
h_order = combine((f_frontier, f_corners, f_xsquares), (-1, 200, -60))
h_current = get_heuristic_data(features, """
12 67 13 -319 -24 247 -234 -109 -10
15 21 359 -1074 -897 759 -1049 -539 10
18 -389 963 -3365 -954 2129 -2434 -1390 -10
21 -374 726 -2389 507 1219 -1694 -900 -10
24 -318 511 -1427 153 600 -839 -487 -10
27 -136 333 -858 128 373 -554 -281 10
30 -185 886 -1541 125 546 -809 -484 -10
33 -177 641 -691 119 344 -567 -352 10
36 -894 4522 -4934 645 1985 -2871 -1987 10
39 -413 1323 -874 285 420 -874 -570 10
42 -67 1010 -390 49 237 -368 -275 10
45 -115 340 -223 101 67 -167 -135 10
48 -1622 13103 -3136 2375 1764 -3779 -3427 -10
51 -75 502 -32 70 117 -95 -101 -10
54 -156 1460 10 331 253 -78 -126 48
57 102 458 21 143 47 -41 -54 10
60 160 276 22 111 31 -13 -21 10
63 4677 1849 -131 1120 293 -60 -49 10
""")
mpc_data = get_mpc_data("""
7
3 1 0.49872233235163327 -0.18062911854419894 0.01750857891787497
4 2 1.043848817421275 -1.0052455936264226 0.01610244706065025
5 1 0.5298735207535833 -0.31651807485306876 0.01827251974694224
6 2 1.0124221480313553 -0.5493055284224999 0.01802224890641194
7 3 0.9039278188434997 0.546459218533818 0.01571013305431626
8 4 0.7900940527123469 0.5146704043044985 0.00704532785169642
8
3 1 0.7881327160691566 1.1997377788202805 0.016124657707841415
4 2 0.9970796307413151 0.27992732737100656 0.014042988473924576
5 1 0.8487581173936353 0.6430293694808223 0.017328232611826436
6 2 0.8908930040631535 -0.3112462968138727 0.016932795350391276
7 3 0.9020311554156372 -0.4647604998909005 0.01251838313230166
8 4 1.0491737199069973 -0.06356292520399709 0.015139815874620134
9
3 1 0.9845072446179562 -0.273126736574437 0.009173440392908112
4 2 1.029235947640561 0.44167800971253346 0.008645771255081458
5 1 0.9453014337728955 0.465516862517958 0.010892436012258028
6 2 0.9636769456683292 0.3835832916606985 0.009805025684201444
7 3 0.9931719263422468 0.4654792487626822 0.00887265055653166
8 4 0.9328322553064414 0.6111027388246506 0.007970739924607513
10
3 1 0.9570935891853722 -0.3573978353979945 0.008674916190475786
4 2 0.9468133982001418 -0.49961851797569556 0.006625793496757819
5 1 0.9443836418128275 -0.15654608351321095 0.009564501096691491
6 2 0.9707625670118686 0.2164911067316 0.009067344607739294
7 3 1.0035953285878934 0.06323027344321898 0.007721340546603803
8 4 1.006715260025199 0.73043842181044 0.007306006916688639
11
3 1 0.924191600544425 0.6316887529316713 0.008129472850781838
4 2 0.988410773950878 -0.1334836355023481 0.007205143002896731
5 1 0.9418441057176115 0.31370625766240967 0.01059197640771564
6 2 0.9965748452018832 0.44557917723603513 0.010689020288298658
7 3 0.998753282331182 -0.32566825642465824 0.008851909242625735
8 4 1.044312707412521 0.5780946021903008 0.009735805599937185
12
3 1 0.653210744947344 3.2244963100761472 0.4042673002726003
4 2 0.9994006558479571 0.8600808843534984 0.0009998313643576518
5 1 0.6594279270860183 3.1549327930838604 0.40438206670376087
6 2 0.9992321651489133 0.8958237283120609 0.0010786951216326234
7 3 1.0006789454689777 -0.007303038399643302 0.0011994824770360849
8 4 1.000208175667394 0.26944279105215774 0.000895983426443946
13
3 1 1.002032725227525 -0.23779010549262658 0.009403025710085148
4 2 1.0046780504166957 0.668957554502458 0.009091011122791166
5 1 0.9943246539793428 -0.35812667601157244 0.009704817209139245
6 2 1.0399846719040753 0.721373699725151 0.012370280625992987
7 3 1.0290384151899845 -0.14295405902194114 0.009062681836513653
8 4 1.0251223818421333 0.04497282608632425 0.010263799963533611
14
3 1 1.0059646046017046 -0.05664250064959808 0.009365935108450022
4 2 0.9958008222166357 0.1488365235516449 0.006211668289440638
5 1 1.048545394627508 0.08834477020205561 0.012398858182252446
6 2 1.039923266882938 0.3583414138888952 0.009439776315218525
7 3 1.0438498320662275 0.1987542447746966 0.008951720198590285
8 4 0.9873443071729008 0.6450118833209944 0.009546807177745394
15
3 1 1.0055213485732544 -0.2815025854332558 0.008750614324674971
4 2 1.0394058118547769 0.09485739275909566 0.008574682553764682
5 1 1.0545735236624907 -0.25302509885433544 0.012882051421686592
6 2 1.0461434179075253 0.06736408973154884 0.011666313936312575
7 3 1.0032528450333598 -0.003908433220696228 0.011674445606447073
8 4 0.9614357038902687 0.3360753824959204 0.008698542266077523
16
3 1 1.0269277682081714 0.13795360448617133 0.0084459649769679
4 2 1.038673790864585 0.34424503668963213 0.008290659673166823
5 1 1.039636069752097 0.221810366392589 0.010117308284666693
6 2 0.9806338224183386 0.7329346118250735 0.010965292701765059
7 3 0.9587864802887441 0.11077341006906671 0.008314597230466517
8 4 0.949180983854892 0.4639951876473427 0.008176392602760417
17
3 1 1.051798707289004 -0.32957579454154784 0.011429615481303293
4 2 1.0034783521699362 -0.11675636492164365 0.007320181731129849
5 1 0.9791651869158827 -0.2629946278337605 0.013394663008046658
6 2 0.9331702082795168 0.48533060265752326 0.009978020880448964
7 3 0.9316109589995626 0.014990906030780238 0.008787786746112672
8 4 0.9655381888664586 0.6655929524464375 0.007308851487945916
18
3 1 1.0140007247029619 -0.1295286676521905 0.008729433000215857
4 2 0.9528617655472965 0.3572103179726738 0.008321359029579705
5 1 0.9713570234612782 -0.21969370427520662 0.01127715489382765
6 2 0.9631478404391824 0.3614135044403315 0.00954155371525032
7 3 0.9941020074304587 -0.2544974509033383 0.0088705641149565
8 4 1.0479138614975005 -0.442925005113866 0.009414146685417705
19
3 1 0.9663589708538627 -0.08969347737127942 0.013021497877541697
4 2 0.9503687026691698 0.5850061217914329 0.01362763624278662
5 1 0.9764799426109197 -0.005732146596642451 0.015179628770564547
6 2 0.9828870028265353 0.95768406344654 0.012503169699809974
7 3 1.0181220385053629 0.6392850362501794 0.009991505129544085
8 4 1.0247266275041105 0.41776619864774034 0.009549925329482808
20
3 1 0.9488453507394242 0.020901862656629966 0.0147741463021944
4 2 1.030638408100812 0.057769103326298143 0.009096175527077087
5 1 0.9937585494760038 -0.19523325482641463 0.016006256939707218
6 2 1.066280839826163 -0.31529129347987084 0.013278993143694448
7 3 1.0575710822763216 -0.21037266415221723 0.01049370738887754
8 4 0.9758323600945262 0.09229104746283223 0.010056201243228877
21
3 1 1.010798110264784 -0.08012114525537051 0.008749202988926385
4 2 1.0499670042081704 0.010312546169935821 0.01061735915237121
5 1 1.056628662595625 0.13126588358908986 0.013252167668140344
6 2 1.0797176197230207 -0.132495326924837 0.01349879165057834
7 3 0.9628647700335949 0.16909132529972482 0.012154888851680088
8 4 0.9342459654700697 0.07024860825094592 0.012041031172405275
22
3 1 1.0457176263921246 -0.12189577539346064 0.009029889279439249
4 2 1.0403866494219594 -0.16237105274525132 0.008566362065632804
5 1 1.0499727376903047 -0.1139332542115884 0.012882937306613818
6 2 0.9734289465105074 0.3531357821783956 0.012032725287511321
7 3 0.9364449006825638 0.46724472524558325 0.011697791501512433
8 4 0.9493994115315765 0.7632234453850086 0.011490145960190169
23
3 1 1.0495962995661994 0.35087217957919226 0.013334855640946953
4 2 1.0149686100052764 0.08548763379945168 0.010451675482996213
5 1 0.97244465374772 0.1655294985093727 0.014875217555263196
6 2 0.9340020821922279 -0.052018116808675074 0.01421200920218457
7 3 0.9459280918185802 -0.31187211205484866 0.012611677308533392
8 4 0.9917551930112132 -0.10904282774729479 0.009251253150642642
24
3 1 1.0225125264186514 -0.1665914154253918 0.011661419232161175
4 2 0.9207381683579898 0.7786316739817656 0.012349208028932523
5 1 0.9505537013417509 0.32106948351383946 0.0160252791116169
6 2 0.9375415239891617 0.789213705089107 0.014824197522042762
7 3 0.9956329718804714 -0.11821170119889612 0.009605167683048322
8 4 1.0683589788709615 -0.5157655113394997 0.010893533664106546
25
3 1 0.9509555382909896 -0.6435397458547101 0.011830098735760084
4 2 0.9390221280761065 -0.1850352422247612 0.010057505501395631
5 1 0.9705261398546625 -0.8627315716147175 0.013850333457493947
6 2 1.003780989496021 0.10125955554855892 0.011747379311129565
7 3 1.0732963784053389 0.06807906755592885 0.013019756286503497
8 4 1.0820099656998168 0.48653603629215336 0.012762050735232684
26
3 1 0.9513836779663325 0.2857888829738219 0.011888009997834808
4 2 1.0257108528953407 0.24722652870368567 0.009350147926832487
5 1 1.0154130811765694 -0.3759146991089488 0.013002465306937163
6 2 1.0920311109362424 -0.3337899185705462 0.01351534927273803
7 3 1.09908994602748 -0.8228011737104584 0.015164536248582902
8 4 1.0246296847596938 -0.23693508141776398 0.01620757241713344
27
3 1 1.0382123816523263 -0.4793334812104799 0.013187109602105288
4 2 1.0765806707458094 0.5306545898630226 0.009012680795647682
5 1 1.1084234360248566 -0.06400182567201629 0.016038314490489654
6 2 1.0859949300293987 0.711738341099541 0.012780484100863142
7 3 0.9987483287921546 0.2995732802044806 0.011895058465407504
8 4 0.9528207669651906 0.3412128274881141 0.013072261806688303
28
3 1 1.0843743932560757 -0.747453563807345 0.011628268755280089
4 2 1.0826128713019383 -0.24049360609866444 0.010393605296538138
5 1 1.112411931923546 -0.8499215569206289 0.01747869048768399
6 2 1.0201861069785552 0.5666463492260023 0.015870869425314696
7 3 0.9664119629402456 0.19004438896362252 0.01601953569820074
8 4 0.9591793463593326 1.0434086689907653 0.015001560517972445
29
3 1 1.06586907818753 0.1820889897377871 0.016636224097401127
4 2 1.0228492704714338 0.39271972443129766 0.013421328337345724
5 1 0.9988975437226587 0.21317932986489296 0.01723624858461905
6 2 0.9447450459233354 0.7310884064368341 0.018046097399467224
7 3 0.9517832053620863 0.009335729214768662 0.014768620502442953
8 4 0.9752364081554059 0.5961004822424618 0.012517241077884853
30
3 1 1.0357473467171427 -0.43449893365710324 0.010255968204256338
4 2 0.9506217012844085 0.5622800882333863 0.010920756635951982
5 1 0.9783713517894393 0.025058399333688364 0.015909375378586735
6 2 0.9794685930448177 0.9710863988209302 0.014820238614144556
7 3 0.9999026451239242 0.14990967903237795 0.011810176392887145
8 4 1.0800334005625447 0.36551676159087076 0.01038862715143978
31
3 1 0.9611935006563656 -0.38497589617151196 0.012727729165285761
4 2 0.9556786313836094 0.17342154637470486 0.014474110298187374
5 1 0.986957239642813 -0.38051350245378046 0.020838200959893118
6 2 1.0056673386829507 0.37385516344286174 0.018941739111186445
7 3 1.088469170784855 -0.07162363825132267 0.015551732208719336
8 4 1.0876956258917931 0.4161854049838798 0.01563424260033049
32
3 1 0.9683787319152176 -0.05090989403166546 0.013796909296337463
4 2 1.0328798186210946 0.5295622997213805 0.009982267616377974
5 1 1.0203856729069525 -0.41463961389700144 0.017275035584122238
6 2 1.0869521373187396 0.6228426862694207 0.013789385370292303
7 3 1.0774692613317172 -0.21452281921808947 0.012451623577944403
8 4 1.0324819969789827 0.6489987595864064 0.016082163051711097
33
3 1 1.033800913118873 -0.4412983241907842 0.013339723666815656
4 2 1.0606714700375353 0.31638705619681673 0.011402895351914046
5 1 1.1071062387179957 -0.7690459535522987 0.020091155975782996
6 2 1.0972347437640233 0.6519818821311878 0.01692398849394624
7 3 1.0642540673798135 0.6130785080100125 0.017439236850485963
8 4 1.0132084315471257 1.0822121317641527 0.017499072071310146
34
3 1 1.0745135490000775 -0.8057356234305375 0.014332990031593081
4 2 1.0725879292234652 0.19488066592691045 0.010276662254803587
5 1 1.1217110101764438 -1.0958810732075321 0.017307851298557442
6 2 1.0534348535966978 0.507250107901243 0.018908386387643455
7 3 1.0241925933067924 0.13355294072285373 0.018628858466294945
8 4 1.0207652453445395 0.7901078554440035 0.019717481682820375
35
3 1 1.0713960201218766 -0.4444276351614511 0.010536340393459699
4 2 1.03007124529924 0.3322348309558656 0.008614954318162641
5 1 1.045876471649206 0.023381055662593075 0.017146790060338733
6 2 1.0202526541751518 0.84436222203974 0.018584150599608825
7 3 1.0293932775398824 0.36648853277989324 0.019258416368735154
8 4 1.0252089832425342 1.1795373566781895 0.01562720714645139
36
3 1 1.0442908010215948 -0.5150664313637838 0.01013216789945398
4 2 0.9523170994989834 0.6055089304313888 0.012488280687702908
5 1 0.9965113527422236 0.23527868936584628 0.017003299192469293
6 2 0.9795347363773377 1.2072136834649374 0.018689360016072718
7 3 0.9689275850403191 0.029463290807871356 0.015900419207125774
8 4 1.0501836108286973 1.0110436260771314 0.014893936658662513
37
3 1 0.9914909167185492 0.3762092482014108 0.015044404003537607
4 2 0.980768666781637 0.7566294763477508 0.01345477422496344
5 1 1.0180701837676285 0.22992970640561428 0.020193875924010733
6 2 1.0034630539737597 1.4225655282709662 0.015739931755173037
7 3 1.0507365690916606 -0.7523168009650121 0.014025311527675218
8 4 1.0564805974355125 1.0263288727498567 0.012971371630672504
38
3 1 1.006665518999307 -0.32617675774837274 0.01314972088393477
4 2 1.0366137110553353 0.6779342309235865 0.010641049606762317
5 1 1.0041388645922549 -0.6035426341517836 0.017106510157411457
6 2 1.0260430206104407 1.6310784241077276 0.01756457755899415
7 3 1.0345665299354443 -0.0489117974962987 0.015276973484164753
8 4 1.0753200641301395 1.8399882328429276 0.016718180710505966
39
3 1 1.0322719489008136 -0.3575433456533217 0.012163702251445014
4 2 1.010450752923298 1.1141461831151251 0.011664583337957812
5 1 1.0407000606735264 -0.6576813654698834 0.017791861150711494
6 2 1.0527523624289032 1.7402998433158547 0.01563792853708168
7 3 1.0896881371461065 -0.20309058769423594 0.01588784859513561
8 4 1.1242459040784818 0.4745206287902626 0.016662431915227996
40
3 1 1.0070772284562943 -0.983087190109341 0.011938102264050846
4 2 1.0174734959258664 0.5482551965704245 0.01269759267195244
5 1 1.0575545163526583 -1.617469260640621 0.01624879414366382
6 2 1.0729848360737375 1.302726161182299 0.015900785840175215
7 3 1.1182426956101315 0.09637733665057224 0.015663357957577496
8 4 1.1088008057312362 0.8556524801178069 0.014276069483927071
41
3 1 1.0076857473915015 -0.38999997429629385 0.013179409411030723
4 2 1.0297033900027637 0.6089994851567795 0.01024746112369391
5 1 1.062250726706104 -0.773310016701962 0.01756363762237969
6 2 1.0753463081582282 0.5122137596090388 0.017688977084326218
7 3 1.099330659208575 -0.6173663983602182 0.01708523304267513
8 4 1.0796740399129843 -0.3720693448497281 0.01944441972079658
42
3 1 1.0559381043602125 -0.6851842481944508 0.009538431827581175
4 2 1.0597401269152187 1.0431417219156227 0.009813003144819876
5 1 1.1150407667951074 0.1903398505630447 0.01568270531719794
6 2 1.1026842376880162 1.7290379483915186 0.01462329523168975
7 3 1.074690618105376 1.4766556408218237 0.01690652238828144
8 4 1.0781120684682042 1.7050833394840978 0.01436354061127673
43
3 1 1.0708044548889069 -1.0022996878558628 0.011874253829816772
4 2 1.079448110298844 -0.32119010858711805 0.011731102162083841
5 1 1.1249513366944 -1.5714651803195672 0.017452362360437505
6 2 1.1006119490146922 -0.44628745472326736 0.018019274816267014
7 3 1.0971303393945138 -1.4863749502305157 0.014469904725388172
8 4 1.0866854181935082 0.08998928266242157 0.013941918395347417
44
3 1 1.0762543415080386 0.0719022994412204 0.012074199645046635
4 2 1.0594877170707757 0.4670121537910181 0.008215855496747556
5 1 1.1169413874902225 0.7418741223849108 0.01922278474437524
6 2 1.1115609180689647 1.8823237240336153 0.014969157672522696
7 3 1.1011069620408607 0.10955644334225312 0.014455214277564538
8 4 1.075642996447674 0.5317833719702607 0.01920498285671661
45
3 1 1.062644447917747 -1.0243934861849784 0.008666834760641038
4 2 1.0361694179946115 -0.27934750373689 0.00921614305989544
5 1 1.0958309503526296 -2.025606299920608 0.013787911193102046
6 2 1.1105758039350528 0.4263917579037013 0.01449167690404193
7 3 1.0641915908951631 1.2793832681972717 0.019013602152439805
8 4 1.1209821490391227 3.194486337272049 0.0170218796475558
46
3 1 1.0494499774535142 -0.16554151737464817 0.010942378531135511
4 2 1.035820222173962 1.2922675992824537 0.00919693781266415
5 1 1.12262780180987 -0.9921981525602144 0.01430030162716015
6 2 1.0673045252114743 0.34001944631586767 0.016870658602289836
7 3 1.1276651174784986 -2.2767925088481746 0.015539457059302682
8 4 1.1446696746166425 -0.42752025155431816 0.015386802016437572
47
3 1 1.055317451161745 -1.6232493559568635 0.008967513826021352
4 2 1.0638296654651553 0.5891224211980353 0.007263590550283649
5 1 1.0720489714218526 0.6686692153264113 0.014985297860618006
6 2 1.1131584811786666 3.347844496796462 0.013743524346692189
7 3 1.122754881476657 1.644535911840613 0.01291335023228123
8 4 1.0496348212479858 1.8659576530223818 0.011087634064615243
48
3 1 1.0581422033017946 -1.1862023210177624 0.00732889882677622
4 2 1.0180189562099973 -0.8712691824082683 0.009753631371428276
5 1 1.0863796052118522 -2.7097208596900657 0.013511498888995997
6 2 1.0889263354593823 -0.07046290845202385 0.012870365042358323
7 3 1.052082620351404 -0.8632148686202248 0.011563166316134925
8 4 1.0845218624583606 1.5225577675310373 0.010384737832837974
49
3 1 1.0315295880494495 1.5327246410560473 0.009237194482107821
4 2 1.0456655083953101 2.8090574231158008 0.008893630207193071
5 1 1.1302451735929713 0.5580263276508761 0.012660212746786942
6 2 1.0600831584618124 2.2365073988406614 0.0106866828842297
7 3 1.120508688513898 -1.5503485778061572 0.009490440714593535
8 4 1.1127174451357662 0.0529253305042241 0.00926764144630609
50
3 1 1.0197644001499016 -1.9683286330486571 0.009039725260621375
4 2 1.0879672845764086 1.449118507765645 0.006496575518982227
5 1 1.0479981267012337 -1.3269976455689765 0.010688671899060979
6 2 1.112810857782963 2.425793897125133 0.009292691484152274
7 3 1.1421249649317093 0.5118304226038966 0.009281014835718875
8 4 0.9732281267018869 0.9334685327027992 0.008508776465386494
51
3 1 1.0690034628906542 -1.7068446963287922 0.00723085534391133
4 2 1.0149700847815013 -0.28356868812551195 0.005507264433753598
5 1 1.102748851083781 -2.6364730853503255 0.009510382184924202
6 2 1.1303809873702748 0.615971296283436 0.008782377531262339
7 3 0.9795643221982551 -0.1142575778374546 0.007448295368814208
8 4 1.0536850646668787 1.1573550174105884 0.007773043618272889
52
3 1 1.0060550556818102 -0.28593152291911483 0.005804266198876964
4 2 1.0167089374357736 0.9954454232866881 0.0050432164109346905
5 1 1.131526243632479 -1.209359344510121 0.00892653126201517
6 2 0.9672743753306093 0.6300959118289602 0.007210021570213535
7 3 1.093455560448543 -1.0759352508993918 0.0077139402917656705
8 4 1.082492352805037 0.9348731306537967 0.008103573320605267
53
3 1 1.0236963249348485 -1.5229271741627484 0.004922778914459006
4 2 1.1091896186030572 1.2805344848437556 0.005285490501058308
5 1 0.9713906499716518 -0.9329447386360812 0.006813120733122899
6 2 1.0542726167808538 1.9546318561480946 0.0071036580338353205
7 3 1.0958802720032927 -0.34394628802204963 0.007281673699710706
8 4 0.8483629395121165 -0.7881646672671421 0.006517071231596328
54
3 1 1.100986756229752 -1.6311279760760762 0.004590712056728291
4 2 0.9597951636724522 0.2907125723187285 0.003615874397485185
5 1 1.1133197914150357 -1.2837644949516038 0.030304537129341787
6 2 1.2816831927834758 0.9795047381931248 0.06176435827716164
7 3 1.209747568024742 -1.7110101889974425 0.09110163659981542
8 4 1.5532436108321162 -1.5109173720397457 0.10665914855360402
55
3 1 0.962736807504431 -0.4577133480331774 0.0033297167932707524
4 2 0.9657976340043136 0.9454979535319801 0.003273118908908148
5 1 1.1140954928309104 -1.7771223426388971 0.005716556105643989
6 2 1.0310678519625511 0.10004129934247974 0.054034765321672354
7 3 1.294154270174295 -0.6677568718115117 0.06315917614107854
8 4 1.551902152190838 -1.107218712477838 0.09198310429844199""")

# Flip calculation helper methods
# outflank array (indexed with inner 6 bits)
OUTFLANK_2 = [
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40, 0x41, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
    0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00]
OUTFLANK_3 = [
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00]
OUTFLANK_4 = [
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
OUTFLANK_5 = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
OUTFLANK_6 = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]
OUTFLANK_7 = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01]# (Count of leading 1 from bit 5) * 8
CONTIG_UP=[
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
    16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 32, 32, 40, 48]# (Count of leading 1 from bit 5) * 9
CONTIG_UPLEFT = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
    18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 27, 36, 36, 45, 54]# (Count of trailing 1) * 7
CONTIG_UPRIGHT = [
    0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 28,
    0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 35,
    0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 28,
    0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 42]#flip array (indexed with outflank, returns inner 6 bits)
FLIPPED_2_H =[
    0x0000000000000000, 0x0202020202020202, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0808080808080808, 0x0a0a0a0a0a0a0a0a, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x1818181818181818, 0x1a1a1a1a1a1a1a1a, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x3838383838383838, 0x3a3a3a3a3a3a3a3a, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x7878787878787878, 0x7a7a7a7a7a7a7a7a]
FLIPPED_3_H =[
    0x0000000000000000, 0x0606060606060606, 0x0404040404040404, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x1010101010101010, 0x1616161616161616, 0x1414141414141414, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x3030303030303030, 0x3636363636363636, 0x3434343434343434, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x7070707070707070, 0x7676767676767676, 0x7474747474747474]
FLIPPED_4_H =[
    0x0000000000000000, 0x0e0e0e0e0e0e0e0e, 0x0c0c0c0c0c0c0c0c, 0x0000000000000000, 0x0808080808080808, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x2020202020202020, 0x2e2e2e2e2e2e2e2e, 0x2c2c2c2c2c2c2c2c, 0x0000000000000000, 0x2828282828282828, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x6060606060606060, 0x6e6e6e6e6e6e6e6e, 0x6c6c6c6c6c6c6c6c, 0x0000000000000000, 0x6868686868686868]
FLIPPED_5_H =[
    0x0000000000000000, 0x1e1e1e1e1e1e1e1e, 0x1c1c1c1c1c1c1c1c, 0x0000000000000000, 0x1818181818181818, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x1010101010101010, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x4040404040404040, 0x5e5e5e5e5e5e5e5e, 0x5c5c5c5c5c5c5c5c, 0x0000000000000000, 0x5858585858585858, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x5050505050505050]
FLIPPED_3_V =[
    0x0000000000000000, 0x0000000000ffff00, 0x0000000000ff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x000000ff00000000, 0x000000ff00ffff00, 0x000000ff00ff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000ffff00000000, 0x0000ffff00ffff00, 0x0000ffff00ff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x00ffffff00000000, 0x00ffffff00ffff00, 0x00ffffff00ff0000]
FLIPPED_4_V =[
    0x0000000000000000, 0x00000000ffffff00, 0x00000000ffff0000, 0x0000000000000000, 0x00000000ff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000ff0000000000, 0x0000ff00ffffff00, 0x0000ff00ffff0000, 0x0000000000000000, 0x0000ff00ff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x00ffff0000000000, 0x00ffff00ffffff00, 0x00ffff00ffff0000, 0x0000000000000000, 0x00ffff00ff000000]
FLIPPED_5_V =[
    0x0000000000000000, 0x000000ffffffff00, 0x000000ffffff0000, 0x0000000000000000, 0x000000ffff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x000000ff00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x00ff000000000000, 0x00ff00ffffffff00, 0x00ff00ffffff0000, 0x0000000000000000, 0x00ff00ffff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x00ff00ff00000000]
FLIPPED_3_U =[
    0x0000000000000000, 0x00ffff0000000000, 0x0000ff0000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x00000000ff000000, 0x00ffff00ff000000, 0x0000ff00ff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x00000000ffff0000, 0x00ffff00ffff0000, 0x0000ff00ffff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
    0x00000000ffffff00, 0x00ffff00ffffff00, 0x0000ff00ffffff00]

def flip_A1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0101010101010100) + 0x0000000000000100) & P & 0x0101010101010100
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0101010101010100
    outflank_h = ((O & 0x000000000000007e) + 0x0000000000000002) & P
    flipped |= (outflank_h -  (outflank_h != 0)) & 0x000000000000007e
    outflank_d9 = ((O | 0xffffffffffffffff^0x8040201008040200) + 0x0000000000000200) & P & 0x8040201008040200
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x8040201008040200
    return flipped
def flip_B1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0202020202020200) + 0x0000000000000200) & P & 0x0202020202020200
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0202020202020200
    outflank_h = ((O & 0x000000000000007c) + 0x0000000000000004) & P
    flipped |= (outflank_h -  (outflank_h != 0)) & 0x000000000000007c
    outflank_d9 = ((O | 0xffffffffffffffff^0x0080402010080400) + 0x0000000000000400) & P & 0x0080402010080400
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0080402010080400
    return flipped
def flip_C1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0404040404040400) + 0x0000000000000400) & P & 0x0404040404040400
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0404040404040400
    outflank_h = OUTFLANK_2[(O >> 1) & 0x3f] & P
    flipped |=  0x00000000000000ff & FLIPPED_2_H[outflank_h]
    flipped |= ((P >> 7) & 0x0000000000000200 & O)
    outflank_d9 = ((O | 0xffffffffffffffff^0x0000804020100800) + 0x0000000000000800) & P & 0x0000804020100800
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0000804020100800
    return flipped
def flip_D1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0808080808080800) + 0x0000000000000800) & P & 0x0808080808080800
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0808080808080800
    outflank_h = OUTFLANK_3[(O >> 1) & 0x3f] & P
    flipped |=  0x00000000000000ff & FLIPPED_3_H[outflank_h]
    outflank_d7 = ((O | 0xffffffffffffffff^0x0000000001020400) + 0x0000000000000400) & P & 0x0000000001020400
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0000000001020400
    outflank_d9 = ((O | 0xffffffffffffffff^0x0000008040201000) + 0x0000000000001000) & P & 0x0000008040201000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0000008040201000
    return flipped
def flip_E1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x1010101010101000) + 0x0000000000001000) & P & 0x1010101010101000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x1010101010101000
    outflank_h = OUTFLANK_4[(O >> 1) & 0x3f] & P
    flipped |=  0x00000000000000ff & FLIPPED_4_H[outflank_h]
    outflank_d7 = ((O | 0xffffffffffffffff^0x0000000102040800) + 0x0000000000000800) & P & 0x0000000102040800
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0000000102040800
    outflank_d9 = ((O | 0xffffffffffffffff^0x0000000080402000) + 0x0000000000002000) & P & 0x0000000080402000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0000000080402000
    return flipped
def flip_F1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x2020202020202000) + 0x0000000000002000) & P & 0x2020202020202000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x2020202020202000
    outflank_h = OUTFLANK_5[(O >> 1) & 0x3f] & P
    flipped |=  0x00000000000000ff & FLIPPED_5_H[outflank_h]
    outflank_d7 = ((O | 0xffffffffffffffff^0x0000010204081000) + 0x0000000000001000) & P & 0x0000010204081000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0000010204081000
    flipped |= ((P >> 9) & 0x0000000000004000 & O)
    return flipped
def flip_G1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x4040404040404000) + 0x0000000000004000) & P & 0x4040404040404000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x4040404040404000
    outflank_h = OUTFLANK_7[O & 0x3e] & (P << 1)
    flipped |= ((-outflank_h) & 0x3e) << 0
    outflank_d7 = ((O | 0xffffffffffffffff^0x0001020408102000) + 0x0000000000002000) & P & 0x0001020408102000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0001020408102000
    return flipped
def flip_H1(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x8080808080808000) + 0x0000000000008000) & P & 0x8080808080808000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x8080808080808000
    outflank_h = OUTFLANK_7[(O >> 1) & 0x3f] & P
    flipped |= ((-outflank_h) & 0x3f) << 1
    outflank_d7 = ((O | 0xffffffffffffffff^0x0102040810204000) + 0x0000000000004000) & P & 0x0102040810204000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0102040810204000
    return flipped
def flip_A2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0101010101010000) + 0x0000000000010000) & P & 0x0101010101010000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0101010101010000
    outflank_h = ((O & 0x0000000000007e00) + 0x0000000000000200) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000000000007e00
    outflank_d9 = ((O | 0xffffffffffffffff^0x4020100804020000) + 0x0000000000020000) & P & 0x4020100804020000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x4020100804020000
    return flipped
def flip_B2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0202020202020000) + 0x0000000000020000) & P & 0x0202020202020000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0202020202020000
    outflank_h = ((O & 0x0000000000007c00) + 0x0000000000000400) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000000000007c00
    outflank_d9 = ((O | 0xffffffffffffffff^0x8040201008040000) + 0x0000000000040000) & P & 0x8040201008040000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x8040201008040000
    return flipped
def flip_C2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0404040404040000) + 0x0000000000040000) & P & 0x0404040404040000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0404040404040000
    outflank_h = OUTFLANK_2[(O >> 9) & 0x3f] & (P >> 8)
    flipped |= FLIPPED_2_H[outflank_h] & 0x000000000000ff00
    flipped |= ((P >> 7) & 0x0000000000020000 & O)
    outflank_d9 = ((O | 0xffffffffffffffff^0x0080402010080000) + 0x0000000000080000) & P & 0x0080402010080400
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0080402010080000
    return flipped
def flip_D2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0808080808080000) + 0x0000000000080000) & P & 0x0808080808080000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0808080808080000
    outflank_h = OUTFLANK_3[(O >> 9) & 0x3f] & (P >> 8)
    flipped |= FLIPPED_3_H[outflank_h] & 0x000000000000ff00
    outflank_d7 = ((O | 0xffffffffffffffff^0x0000000102040000) + 0x0000000000040000) & P & 0x0000000102040000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0000000102040000
    outflank_d9 = ((O | 0xffffffffffffffff^0x0000804020100000) + 0x0000000000100000) & P & 0x0000804020100000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0000804020100000
    return flipped
def flip_E2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x1010101010100000) + 0x0000000000100000) & P & 0x1010101010100000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x1010101010100000
    outflank_h = OUTFLANK_4[(O >> 9) & 0x3f] & (P >> 8)
    flipped |= FLIPPED_4_H[outflank_h] & 0x000000000000ff00
    outflank_d7 = ((O | 0xffffffffffffffff^0x0000010204080000) + 0x0000000000080000) & P & 0x0000010204080000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0000010204080000
    outflank_d9 = ((O | 0xffffffffffffffff^0x0000008040200000) + 0x0000000000200000) & P & 0x0000008040200000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0000008040200000
    return flipped
def flip_F2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x2020202020200000) + 0x0000000000200000) & P & 0x2020202020200000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x2020202020200000
    outflank_h = OUTFLANK_5[(O >> 9) & 0x3f] & (P >> 8)
    flipped |= FLIPPED_5_H[outflank_h] & 0x000000000000ff00
    outflank_d7 = ((O | 0xffffffffffffffff^0x0001020408100000) + 0x0000000000100000) & P & 0x0001020408100000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0001020408100000
    flipped |= ((P >> 9) & 0x0000000000400000 & O)
    return flipped
def flip_G2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x4040404040400000) + 0x0000000000400000) & P & 0x4040404040400000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x4040404040400000
    outflank_h = OUTFLANK_7[(O >> 8) & 0x3e] & (P >> 7)
    flipped |= ((-outflank_h) & 0x3e) << 8
    outflank_d7 = ((O | 0xffffffffffffffff^0x0102040810200000) + 0x0000000000200000) & P & 0x0102040810200000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0102040810200000
    return flipped
def flip_H2(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x8080808080800000) + 0x0000000000800000) & P & 0x8080808080800000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x8080808080800000
    outflank_h = OUTFLANK_7[(O >> 9) & 0x3f] & (P >> 8)
    flipped |= ((-outflank_h) & 0x3f) << 9
    outflank_d7 = ((O | 0xffffffffffffffff^0x0204081020400000) + 0x0000000000400000) & P & 0x0204081020400000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0204081020400000
    return flipped
def flip_A3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0101010101000000) + 0x0000000001000000) & P & 0x0101010101000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0101010101000000
    outflank_h = ((O & 0x00000000007e0000) + 0x0000000000020000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00000000007e0000
    outflank_d9 = ((O | 0xffffffffffffffff^0x2010080402000000) + 0x0000000002000000) & P & 0x2010080402000000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x2010080402000000
    flipped |= (((P << 8) & 0x0000000000000100) | ((P << 7) & 0x0000000000000200)) & O
    return flipped
def flip_B3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0202020202000000) + 0x0000000002000000) & P & 0x0202020202000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0202020202000000
    outflank_h = ((O & 0x00000000007c0000) + 0x0000000000040000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00000000007c0000
    outflank_d9 = ((O | 0xffffffffffffffff^0x4020100804000000) + 0x0000000004000000) & P & 0x4020100804000000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x4020100804000000
    flipped |= (((P << 8) & 0x0000000000000200) | ((P << 7) & 0x0000000000000400)) & O
    return flipped
def flip_C3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0404040404000000) + 0x0000000004000000) & P & 0x0404040404000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0404040404000000
    outflank_h = OUTFLANK_2[(O >> 17) & 0x3f] & (P >> 16)
    flipped |= FLIPPED_2_H[outflank_h] & 0x0000000000ff0000
    outflank_d9 = ((O | 0xffffffffffffffff^0x8040201008000000) + 0x0000000008000000) & P & 0x8040201008000000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x8040201008000000
    flipped |= (((P << 8) & 0x0000000000000400) | ((P << 9) & 0x0000000000000200) | (((P >> 7) | (P << 7)) & 0x000000002000800)) & O
    return flipped
def flip_D3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x0808080808000000) + 0x0000000008000000) & P & 0x0808080808000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x0808080808000000
    outflank_h = OUTFLANK_3[(O >> 17) & 0x3f] & (P >> 16)
    flipped |= FLIPPED_3_H[outflank_h] & 0x0000000000ff0000
    outflank_d7 = ((O | 0xffffffffffffffff^0x0000010204000000) + 0x0000000004000000) & P & 0x0000010204000000
    flipped |= (outflank_d7 - (outflank_d7 >> 24)) & 0x0000010204000000
    outflank_d9 = ((O | 0xffffffffffffffff^0x0080402010000000) + 0x0000000010000000) & P & 0x0080402010000000
    flipped |= (outflank_d9 -  (outflank_d9 != 0)) & 0x0080402010000000
    flipped |= (((P << 8) & 0x0000000000000800) | ((P << 7) & 0x0000000000001000) | ((P << 9) & 0x000000000000400)) & O
    return flipped
def flip_E3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x1010101010000000) + 0x0000000010000000) & P & 0x1010101010000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x1010101010000000
    outflank_h = OUTFLANK_4[(O >> 17) & 0x3f] & (P >> 16)
    flipped |= FLIPPED_4_H[outflank_h] & 0x0000000000ff0000
    outflank_d7 = ((O | 0xffffffffffffffff^0x0001020408000000) + 0x0000000008000000) & P & 0x0001020408000000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0001020408000000
    outflank_d9 = ((O | 0xffffffffffffffff^0x0000804020000000) + 0x0000000020000000) & P & 0x0000804020000000
    flipped |= (outflank_d9 - (outflank_d9 >> 24)) & 0x0000804020000000
    flipped |= (((P << 8) & 0x0000000000001000) | ((P << 7) & 0x0000000000002000) | ((P << 9) & 0x000000000000800)) & O
    return flipped
def flip_F3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x2020202020000000) + 0x0000000020000000) & P & 0x2020202020000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x2020202020000000
    outflank_h = OUTFLANK_5[(O >> 17) & 0x3f] & (P >> 16)
    flipped |= FLIPPED_5_H[outflank_h] & 0x0000000000ff0000
    outflank_d7 = ((O | 0xffffffffffffffff^0x0102040810000000) + 0x0000000010000000) & P & 0x0102040810000000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0102040810000000
    flipped |= (((P << 8) & 0x0000000000002000) | ((P << 7) & 0x0000000000004000) | (((P >> 9) | (P << 9)) & 0x0000000040001000)) & O
    return flipped
def flip_G3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x4040404040000000) + 0x0000000040000000) & P & 0x4040404040000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x4040404040000000
    outflank_h = OUTFLANK_7[(O >> 16) & 0x3e] & (P >> 15)
    flipped |= ((-outflank_h) & 0x3e) << 16
    outflank_d7 = ((O | 0xffffffffffffffff^0x0204081020000000) + 0x0000000020000000) & P & 0x0204081020000000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0204081020000000
    flipped |= (((P << 8) & 0x0000000000004000) | ((P << 9) & 0x0000000000002000)) & O
    return flipped
def flip_H3(P, O):
    outflank_v = ((O | 0xffffffffffffffff^0x8080808080000000) + 0x0000000080000000) & P & 0x8080808080000000
    flipped = (outflank_v -  (outflank_v != 0)) & 0x8080808080000000
    outflank_h = OUTFLANK_7[(O >> 17) & 0x3f] & (P >> 16)
    flipped |= ((-outflank_h) & 0x3f) << 17
    outflank_d7 = ((O | 0xffffffffffffffff^0x0408102040000000) + 0x0000000040000000) & P & 0x0408102040000000
    flipped |= (outflank_d7 -  (outflank_d7 != 0)) & 0x0408102040000000
    flipped |= (((P << 8) & 0x0000000000008000) | ((P << 9) & 0x0000000000004000)) & O
    return flipped
def flip_A4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0001010101010100) * 0x0102040810204080)) >> 57] & (((P & 0x0101010101010101) * 0x0102040810204080) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0001010101010100
    outflank_h = ((O & 0x000000007e000000) + 0x0000000002000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x000000007e000000
    flip_d7 = O & 0x0000000000020000
    flip_d7 |= (flip_d7 >> 7) & O
    flipped |= flip_d7 & -(flip_d7 & (P << 7))
    outflank_d9 = ((O | 0xffffffffffffffff^0x1008040200000000) + 0x0000000200000000) & P & 0x1008040200000000
    flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x1008040200000000
    return flipped
def flip_B4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0002020202020200) * 0x0081020408102040)) >> 57] & (((P & 0x0202020202020202) * 0x0081020408102040) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0002020202020200
    outflank_h = ((O & 0x000000007c000000) + 0x0000000004000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x000000007c000000
    flip_d7 = O & 0x0000000000040000
    flip_d7 |= (flip_d7 >> 7) & O
    flipped |= flip_d7 & -(flip_d7 & (P << 7))
    outflank_d9 = ((O | 0xffffffffffffffff^0x2010080400000000) + 0x0000000400000000) & P & 0x2010080400000000
    flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x2010080400000000
    return flipped
def flip_C4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0004040404040400) * 0x0040810204081020)) >> 57] & (((P & 0x0404040404040404) * 0x0040810204081020) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0004040404040400
    outflank_h = OUTFLANK_2[(O >> 25) & 0x3f] & (P >> 24)
    flipped |= FLIPPED_2_H[outflank_h] & 0x00000000ff000000
    flip_d7 = O & 0x0000000000080000
    flip_d7 |= (flip_d7 >> 7) & O
    flipped |= flip_d7 & -(flip_d7 & (P << 7))
    outflank_d9 = ((O | 0xffffffffffffffff^0x4020100800000000) + 0x0000000800000000) & P & 0x4020100800000000
    flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x4020100800000000
    flipped |= (((P << 9) & 0x00000000000020000) | ((P >> 7) & 0x00000000200000000)) & O
    return flipped
def flip_D4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0008080808080800) * 0x0020408102040810)) >> 57] & (((P & 0x0808080808080808) * 0x0020408102040810) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0008080808080800
    outflank_h = OUTFLANK_3[(O >> 25) & 0x3f] & (P >> 24)
    flipped |= FLIPPED_3_H[outflank_h] & 0x00000000ff000000
    outflank_d7 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0000020408102000) * 0x0101010101010101)) >> 57] & (((P & 0x0001020408102040) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_3_H[outflank_d7] & 0x0000020408102000
    outflank_d9 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0040201008040200) * 0x0101010101010101)) >> 57] & (((P & 0x8040201008040201) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_3_H[outflank_d9] & 0x0040201008040200
    return flipped
def flip_E4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0010101010101000) * 0x0010204081020408)) >> 57] & (((P & 0x1010101010101010) * 0x0010204081020408) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0010101010101000
    outflank_h = OUTFLANK_4[(O >> 25) & 0x3f] & (P >> 24)
    flipped |= FLIPPED_4_H[outflank_h] & 0x00000000ff000000
    outflank_d7 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0002040810204000) * 0x0101010101010101)) >> 57] & (((P & 0x0102040810204080) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_4_H[outflank_d7] & 0x0002040810204000
    outflank_d9 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0000402010080400) * 0x0101010101010101)) >> 57] & (((P & 0x0080402010080402) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_4_H[outflank_d9] & 0x0000402010080400
    return flipped
def flip_F4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0020202020202000) * 0x0008102040810204)) >> 57] & (((P & 0x2020202020202020) * 0x0008102040810204) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0020202020202000
    outflank_h = OUTFLANK_5[(O >> 25) & 0x3f] & (P >> 24)
    flipped |= FLIPPED_5_H[outflank_h] & 0x00000000ff000000
    outflank_d7 = ((O | 0xffffffffffffffff^0x0204081000000000) + 0x0000001000000000) & P & 0x0204081000000000
    flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0204081000000000
    flip_d9 = O & 0x0000000000100000
    flip_d9 |= (flip_d9 >> 9) & O
    flipped |= flip_d9 & -(flip_d9 & (P << 9))
    flipped |= (((P << 7) & 0x0000000000400000) | ((P >> 9) & 0x0000004000000000)) & O
    return flipped
def flip_G4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0040404040404000) * 0x0004081020408102)) >> 57] & (((P & 0x4040404040404040) * 0x0004081020408102) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0040404040404000
    outflank_h = OUTFLANK_7[(O >> 24) & 0x3e] & (P >> 23)
    flipped |= ((-outflank_h) & 0x3e) << 24
    outflank_d7 = ((O | 0xffffffffffffffff^0x0408102000000000) + 0x0000002000000000) & P & 0x0408102000000000
    flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0408102000000000
    flip_d9 = O & 0x0000000000200000
    flip_d9 |= (flip_d9 >> 9) & O
    flipped |= flip_d9 & -(flip_d9 & (P << 9))
    return flipped
def flip_H4(P, O):
    outflank_v = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0080808080808000) * 0x0002040810204081)) >> 57] & (((P & 0x8080808080808080) * 0x0002040810204081) >> 56)
    flipped = FLIPPED_3_V[outflank_v] & 0x0080808080808000
    outflank_h = OUTFLANK_7[(O >> 25) & 0x3f] & (P >> 24)
    flipped |= ((-outflank_h) & 0x3f) << 25
    outflank_d7 = ((O | 0xffffffffffffffff^0x0810204000000000) + 0x0000004000000000) & P & 0x0810204000000000
    flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0810204000000000
    flip_d9 = O & 0x0000000000400000
    flip_d9 |= (flip_d9 >> 9) & O
    flipped |= flip_d9 & -(flip_d9 & (P << 9))
    return flipped
def flip_A5(P, O):
    outflank_a1a5d8 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0004020101010100) * 0x0102040810101010)) >> 57] & (((P & 0x0804020101010101) * 0x0102040810101010) >> 56)
    flipped = FLIPPED_4_V[outflank_a1a5d8] & 0x0004020101010100
    outflank_a8a5e1 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0001010102040800) * 0x0808080808040201)) >> 57] & (((P & 0x0101010102040810) * 0x0808080808040201) >> 56)
    flipped |= FLIPPED_3_U[outflank_a8a5e1] & 0x0001010102040800
    outflank_h = ((O & 0x0000007e00000000) + 0x0000000200000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000007e00000000
    return flipped
def flip_B5(P, O):
    outflank_b1b5e8 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0008040202020200) * 0x0081020408080808)) >> 57] & (((P & 0x1008040202020202) * 0x0081020408080808) >> 56)
    flipped = FLIPPED_4_V[outflank_b1b5e8] & 0x0008040202020200
    outflank_b8b5f1 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0002020204081000) * 0x0808080808040201)) >> 58] & ((((P & 0x0202020204081020) >> 1) * 0x0808080808040201) >> 56)
    flipped |= FLIPPED_3_U[outflank_b8b5f1] & 0x0002020204081000
    outflank_h = ((O & 0x0000007c00000000) + 0x0000000400000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000007c00000000
    return flipped
def flip_C5(P, O):
    outflank_c1c5f8 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0010080404040400) * 0x0040810204040404)) >> 57] & (((P & 0x2010080404040404) * 0x0040810204040404) >> 56)
    flipped = FLIPPED_4_V[outflank_c1c5f8] & 0x0010080404040400
    outflank_c8c5g1 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0004040408102000) * 0x0002020202010080)) >> 57] & ((((P & 0x0404040408102040) >> 2) * 0x0808080808040201) >> 56)
    flipped |= FLIPPED_3_U[outflank_c8c5g1] & 0x0004040408102000
    outflank_h = OUTFLANK_2[(O >> 33) & 0x3f] & (P >> 32)
    flipped |= FLIPPED_2_H[outflank_h] & 0x000000ff00000000
    flipped |= (((P << 9) & 0x0000000002000000) | ((P >> 7) & 0x0000020000000000)) & O
    return flipped
def flip_D5(P, O):
    outflank_v = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0008080808080800) * 0x0020408102040810)) >> 57] & (((P & 0x0808080808080808) * 0x0020408102040810) >> 56)
    flipped = FLIPPED_4_V[outflank_v] & 0x0008080808080800
    outflank_h = OUTFLANK_3[(O >> 33) & 0x3f] & (P >> 32)
    flipped |= FLIPPED_3_H[outflank_h] & 0x000000ff00000000
    outflank_d7 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0002040810204000) * 0x0101010101010101)) >> 57] & (((P & 0x0102040810204080) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_3_H[outflank_d7] & 0x0002040810204000
    outflank_d9 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0020100804020000) * 0x0101010101010101)) >> 57] & (((P & 0x4020100804020100) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_3_H[outflank_d9] & 0x0020100804020000
    return flipped
def flip_E5(P, O):
    outflank_v = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0010101010101000) * 0x0010204081020408)) >> 57] & (((P & 0x1010101010101010) * 0x0010204081020408) >> 56)
    flipped = FLIPPED_4_V[outflank_v] & 0x0010101010101000
    outflank_h = OUTFLANK_4[(O >> 33) & 0x3f] & (P >> 32)
    flipped |= FLIPPED_4_H[outflank_h] & 0x000000ff00000000
    outflank_d7 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0004081020400000) * 0x0101010101010101)) >> 57] & (((P & 0x0204081020408000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_4_H[outflank_d7] & 0x0004081020400000
    outflank_d9 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0040201008040200) * 0x0101010101010101)) >> 57] & (((P & 0x8040201008040201) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_4_H[outflank_d9] & 0x0040201008040200
    return flipped
def flip_F5(P, O):
    outflank_b1f5f8 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0020202010080400) * 0x0080808080810204)) >> 57] & (((P & 0x2020202010080402) * 0x0080808080810204) >> 56)
    flipped = FLIPPED_4_V[outflank_b1f5f8] & 0x0020202010080400
    outflank_c8f5f1 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0008102020202000) * 0x0002010080404040)) >> 57] & ((((P & 0x0408102020202020) >> 2) * 0x1008040201010101) >> 56)
    flipped |= FLIPPED_3_U[outflank_c8f5f1] & 0x0008102020202000
    outflank_h = OUTFLANK_5[(O >> 33) & 0x3f] & (P >> 32)
    flipped |= FLIPPED_5_H[outflank_h] & 0x000000ff00000000
    flipped |= (((P << 7) & 0x0000000040000000) | ((P >> 9) & 0x0000400000000000)) & O
    return flipped
def flip_G5(P, O):
    outflank_c1g5g8 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0040404020100800) * 0x0040404040408102)) >> 57] & (((P & 0x4040404020100804) * 0x0040404040408102) >> 56)
    flipped = FLIPPED_4_V[outflank_c1g5g8] & 0x0040404020100800
    outflank_d8g5g1 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0010204040404000) * 0x0001008040202020)) >> 57] & ((((P & 0x0810204040404040) >> 3) * 0x1008040201010101) >> 56)
    flipped |= FLIPPED_3_U[outflank_d8g5g1] & 0x0010204040404000
    outflank_h = OUTFLANK_7[(O >> 32) & 0x3e] & (P >> 31)
    flipped |=  ((-outflank_h) & 0x3e) << 32
    return flipped
def flip_H5(P, O):
    outflank_d1h5h8 = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0080808040201000) * 0x0020202020204081)) >> 57] & (((P & 0x8080808040201008) * 0x0020202020204081) >> 56)
    flipped = FLIPPED_4_V[outflank_d1h5h8] & 0x0080808040201000
    outflank_e8h5h1 = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0020408080808000) * 0x0000804020101010)) >> 57] & ((((P & 0x1020408080808080) >> 4) * 0x1008040201010101) >> 56)
    flipped |= FLIPPED_3_U[outflank_e8h5h1] & 0x0020408080808000
    outflank_h = OUTFLANK_7[(O >> 33) & 0x3f] & (P >> 32)
    flipped |=  ((-outflank_h) & 0x3f) << 33
    return flipped
def flip_A6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0001010101010100) * 0x0102040810204080)) >> 57] & (((P & 0x0101010101010101) * 0x0102040810204080) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0001010101010100
    outflank_h = ((O & 0x00007e0000000000) + 0x0000020000000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007e0000000000
    flip_d7 = O | 0x0040810000000000
    flip_d7 &= flip_d7 >> 7
    flip_d7 &= (flip_d7 >> 14) & 0x0000000204081000
    flipped |= flip_d7 & -(flip_d7 & (P << 7))
    flipped |= (P >> 9) & 0x0002000000000000 & O
    return flipped
def flip_B6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0002020202020200) * 0x0081020408102040)) >> 57] & (((P & 0x0202020202020202) * 0x0081020408102040) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0002020202020200
    outflank_h = ((O & 0x00007c0000000000) + 0x0000040000000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007c0000000000
    flip_d7 = O | 0x0081020000000000
    flip_d7 &= flip_d7 >> 7
    flip_d7 &= (flip_d7 >> 14) & 0x0000000408102000
    flipped |= flip_d7 & -(flip_d7 & (P << 7))
    flipped |= (P >> 9) & 0x0004000000000000 & O
    return flipped
def flip_C6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0004040404040400) * 0x0040810204081020)) >> 57] & (((P & 0x0404040404040404) * 0x0040810204081020) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0004040404040400
    outflank_h = OUTFLANK_2[(O >> 41) & 0x3f] & (P >> 40)
    flipped |= FLIPPED_2_H[outflank_h] & 0x0000ff0000000000
    outflank_d7 = OUTFLANK_2[(0xffffffffffffffff & ((O & 0x0002040810204000) * 0x0101010101010101)) >> 57] & (((P & 0x0102040810204080) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_2_H[outflank_d7] & 0x0002040810204000
    flipped |= ((P >> 9) | (P << 9)) & 0x0008000200000000 & O
    return flipped
def flip_D6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0008080808080800) * 0x0020408102040810)) >> 57] & (((P & 0x0808080808080808) * 0x0020408102040810) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0008080808080800
    outflank_h = OUTFLANK_3[(O >> 41) & 0x3f] & (P >> 40)
    flipped |= FLIPPED_3_H[outflank_h] & 0x0000ff0000000000
    outflank_d = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0000001422400000) * 0x0101010101010101)) >> 57] & (((P & 0x0000001422418000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_3_H[outflank_d] & 0x0000001422400000
    flipped |= (((P >> 9) & 0x0010000000000000) | ((P >> 7) & 0x0004000000000000)) & O
    return flipped
def flip_E6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0010101010101000) * 0x0010204081020408)) >> 57] & (((P & 0x1010101010101010) * 0x0010204081020408) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0010101010101000
    outflank_h = OUTFLANK_4[(O >> 41) & 0x3f] & (P >> 40)
    flipped |= FLIPPED_4_H[outflank_h] & 0x0000ff0000000000
    outflank_d = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0000002844020000) * 0x0101010101010101)) >> 57] & (((P & 0x0000002844820100) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_4_H[outflank_d] & 0x0000002844020000
    flipped |= (((P >> 9) & 0x0020000000000000) | ((P >> 7) & 0x0008000000000000)) & O
    return flipped
def flip_F6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0020202020202000) * 0x0008102040810204)) >> 57] & (((P & 0x2020202020202020) * 0x0008102040810204) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0020202020202000
    outflank_h = OUTFLANK_5[(O >> 41) & 0x3f] & (P >> 40)
    flipped |= (FLIPPED_5_H[outflank_h] & 0x0000ff0000000000)
    flipped |= ((P >> 7) | (P << 7)) & 0x0010004000000000 & O
    outflank_d9 = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0040201008040200) * 0x0101010101010101)) >> 57] & (((P & 0x8040201008040201) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_5_H[outflank_d9] & 0x0040201008040200
    return flipped
def flip_G6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0040404040404000) * 0x0004081020408102)) >> 57] & (((P & 0x4040404040404040) * 0x0004081020408102) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0040404040404000
    outflank_h = OUTFLANK_7[(O >> 40) & 0x3e] & (P >> 39)
    flipped |=  ((-outflank_h) & 0x3e) << 40
    flipped |= (P >> 7) & 0x0020000000000000 & O
    flip_d9 = O & ((O >> 9) | 0x0000002000000000)
    flip_d9 &= (((flip_d9 & 0x0000002010000000) >> 18) | 0x0000002010000000)
    flipped |= flip_d9 & -(flip_d9 & (P << 9))
    return flipped
def flip_H6(P, O):
    outflank_v = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0080808080808000) * 0x0002040810204081)) >> 57] & (((P & 0x8080808080808080) * 0x0002040810204081) >> 56)
    flipped = FLIPPED_5_V[outflank_v] & 0x0080808080808000
    outflank_h = OUTFLANK_7[(O >> 41) & 0x3f] & (P >> 40)
    flipped |=  ((-outflank_h) & 0x3f) << 41
    flipped |= (P >> 7) & 0x0040000000000000 & O
    flip_d9 = O & ((O >> 9) | 0x0000004000000000)
    flip_d9 &= (((flip_d9 & 0x0000004020000000) >> 18) | 0x0000004020000000)
    flipped |= flip_d9 & -(flip_d9 & (P << 9))
    return flipped
def flip_A7(P, O):
    outflank_v = (0x0000010000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000010101010100) * 0x0102040810204080)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000010101010100
    outflank_h = ((O & 0x007e000000000000) + 0x0002000000000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x007e000000000000
    outflank_d7 = (0x0000020000000000 >> CONTIG_UPRIGHT[(0xffffffffffffffff & ((O & 0x0000020408102000) * 0x0101010101010101)) >> 57]) & P
    flipped |= (-outflank_d7 * 2) & 0x0000020408102000
    return flipped
def flip_B7(P, O):
    outflank_v = (0x0000020000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000020202020200) * 0x0081020408102040)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000020202020200
    outflank_h = ((O & 0x007c000000000000) + 0x0004000000000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x007c000000000000
    outflank_d7 = (0x0000040000000000 >> CONTIG_UPRIGHT[(0xffffffffffffffff & ((O & 0x0000040810204000) * 0x0101010101010101)) >> 58]) & P
    flipped |= (-outflank_d7 * 2) & 0x0000040810204000
    return flipped
def flip_C7(P, O):
    outflank_v = (0x0000040000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000040404040400) * 0x0040810204081020)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000040404040400
    outflank_h = OUTFLANK_2[(O >> 49) & 0x3f] & (P >> 48)
    flipped |= FLIPPED_2_H[outflank_h] & 0x00ff000000000000
    outflank_d = OUTFLANK_2[(0xffffffffffffffff & ((O & 0x00000a1020400000) * 0x0101010101010101)) >> 57] & (((P & 0x00000a1120408000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_2_H[outflank_d] & 0x00000a1020400000
    return flipped
def flip_D7(P, O):
    outflank_v = (0x0000080000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000080808080800) * 0x0020408102040810)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000080808080800
    outflank_h = OUTFLANK_3[(O >> 49) & 0x3f] & (P >> 48)
    flipped |= FLIPPED_3_H[outflank_h] & 0x00ff000000000000
    outflank_d = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0000142240000000) * 0x0101010101010101)) >> 57]& (((P & 0x0000142241800000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_3_H[outflank_d] & 0x0000142240000000
    return flipped
def flip_E7(P, O):
    outflank_v = (0x0000100000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000101010101000) * 0x0010204081020408)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000101010101000
    outflank_h = OUTFLANK_4[(O >> 49) & 0x3f] & (P >> 48)
    flipped |= FLIPPED_4_H[outflank_h] & 0x00ff000000000000
    outflank_d = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0000284402000000) * 0x0101010101010101)) >> 57]& (((P & 0x0000284482010000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_4_H[outflank_d] & 0x0000284402000000
    return flipped
def flip_F7(P, O):
    outflank_v = (0x0000200000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000202020202000) * 0x0008102040810204)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000202020202000
    outflank_h = OUTFLANK_5[(O >> 49) & 0x3f] & (P >> 48)
    flipped |= FLIPPED_5_H[outflank_h] & 0x00ff000000000000
    outflank_d = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0000500804020000) * 0x0101010101010101)) >> 57]& (((P & 0x0000508804020100) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_5_H[outflank_d] & 0x0000500804020000
    return flipped
def flip_G7(P, O):
    outflank_v = (0x0000400000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000404040404000) * 0x0004081020408102)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000404040404000
    outflank_h = OUTFLANK_7[(O >> 48) & 0x3e] & (P >> 47)
    flipped |=  ((-outflank_h) & 0x3e) << 48
    outflank_d9 = (0x0000200000000000 >> CONTIG_UPLEFT[(0xffffffffffffffff & ((O & 0x0000201008040200) * 0x0101010101010101)) >> 56]) & P
    flipped |= (-outflank_d9 * 2) & 0x0000201008040200
    return flipped
def flip_H7(P, O):
    outflank_v = (0x0000800000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0000808080808000) * 0x0002040810204081)) >> 56]) & P
    flipped  = (-outflank_v * 2) & 0x0000808080808000
    outflank_h = OUTFLANK_7[(O >> 49) & 0x3f] & (P >> 48)
    flipped |=  ((-outflank_h) & 0x3f) << 49
    outflank_d9 = (0x0000400000000000 >> CONTIG_UPLEFT[(0xffffffffffffffff & ((O & 0x0000402010080400) * 0x0101010101010101)) >> 57]) & P
    flipped |= (-outflank_d9 * 2) & 0x0000402010080400
    return flipped
def flip_A8(P, O):
    outflank_v = (0x0001000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0001010101010100) * 0x0102040810204080)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0001010101010100
    outflank_h = ((O & 0x7e00000000000000) + 0x0200000000000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x7e00000000000000
    outflank_d7 = (0x0002000000000000 >> CONTIG_UPRIGHT[(0xffffffffffffffff & ((O & 0x0002040810204000) * 0x0101010101010101)) >> 57]) & P
    flipped |= (-outflank_d7 * 2) & 0x0002040810204000
    return flipped
def flip_B8(P, O):
    outflank_v = (0x0002000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0002020202020200) * 0x0081020408102040)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0002020202020200
    outflank_h = ((O & 0x7c00000000000000) + 0x0400000000000000) & P
    flipped |= (outflank_h - (outflank_h >> 8)) & 0x7c00000000000000
    outflank_d7 = (0x0004000000000000 >> CONTIG_UPRIGHT[(0xffffffffffffffff & ((O & 0x0004081020400000) * 0x0101010101010101)) >> 58]) & P
    flipped |= (-outflank_d7 * 2) & 0x0004081020400000
    return flipped
def flip_C8(P, O):
    outflank_v = (0x0004000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0004040404040400) * 0x0040810204081020)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0004040404040400
    outflank_h = OUTFLANK_2[(O >> 57) & 0x3f] & (P >> 56)
    flipped |= FLIPPED_2_H[outflank_h] & 0xff00000000000000
    outflank_d = OUTFLANK_2[(0xffffffffffffffff & ((O & 0x000a102040000000) * 0x0101010101010101)) >> 57]& (((P & 0x000a112040800000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_2_H[outflank_d] & 0x000a102040000000
    return flipped
def flip_D8(P, O):
    outflank_v = (0x0008000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0008080808080800) * 0x0020408102040810)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0008080808080800
    outflank_h = OUTFLANK_3[(O >> 57) & 0x3f] & (P >> 56)
    flipped |= FLIPPED_3_H[outflank_h] & 0xff00000000000000
    outflank_d = OUTFLANK_3[(0xffffffffffffffff & ((O & 0x0014224000000000) * 0x0101010101010101)) >> 57]& (((P & 0x0014224180000000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_3_H[outflank_d] & 0x0014224000000000
    return flipped
def flip_E8(P, O):
    outflank_v = (0x0010000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0010101010101000) * 0x0010204081020408)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0010101010101000
    outflank_h = OUTFLANK_4[(O >> 57) & 0x3f] & (P >> 56)
    flipped |= FLIPPED_4_H[outflank_h] & 0xff00000000000000
    outflank_d = OUTFLANK_4[(0xffffffffffffffff & ((O & 0x0028440200000000) * 0x0101010101010101)) >> 57] & (((P & 0x0028448201000000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_4_H[outflank_d] & 0x0028440200000000
    return flipped
def flip_F8(P, O):
    outflank_v = (0x0020000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0020202020202000) * 0x0008102040810204)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0020202020202000
    outflank_h = OUTFLANK_5[(O >> 57) & 0x3f] & (P >> 56)
    flipped |= FLIPPED_5_H[outflank_h] & 0xff00000000000000
    outflank_d = OUTFLANK_5[(0xffffffffffffffff & ((O & 0x0050080402000000) * 0x0101010101010101)) >> 57] & (((P & 0x0050880402010000) * 0x0101010101010101) >> 56)
    flipped |= FLIPPED_5_H[outflank_d] & 0x0050080402000000
    return flipped
def flip_G8(P, O):
    outflank_v = (0x0040000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0040404040404000) * 0x0004081020408102)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0040404040404000
    outflank_h = OUTFLANK_7[(O >> 56) & 0x3e] & (P >> 55)
    flipped |=  ((-outflank_h) & 0x3e) << 56
    outflank_d9 = (0x0020000000000000 >> CONTIG_UPLEFT[(0xffffffffffffffff & ((O & 0x0020100804020000) * 0x0101010101010101)) >> 56]) & P
    flipped |= (-outflank_d9 * 2) & 0x0020100804020000
    return flipped
def flip_H8(P, O):
    outflank_v = (0x0080000000000000 >> CONTIG_UP[(0xffffffffffffffff & ((O & 0x0080808080808000) * 0x0002040810204081)) >> 57]) & P
    flipped  = (-outflank_v * 2) & 0x0080808080808000
    outflank_h = OUTFLANK_7[(O >> 57) & 0x3f] & (P >> 56)
    flipped |=  ((-outflank_h) & 0x3f) << 57
    outflank_d9 = (0x0040000000000000 >> CONTIG_UPLEFT[(0xffffffffffffffff & ((O & 0x0040201008040200) * 0x0101010101010101)) >> 57]) & P
    flipped |= (-outflank_d9 * 2) & 0x0040201008040200
    return flipped
def flip_pass(P, O):
    return 0
flipfunc = [
    flip_A1, flip_B1, flip_C1, flip_D1, flip_E1, flip_F1, flip_G1, flip_H1,
    flip_A2, flip_B2, flip_C2, flip_D2, flip_E2, flip_F2, flip_G2, flip_H2,
    flip_A3, flip_B3, flip_C3, flip_D3, flip_E3, flip_F3, flip_G3, flip_H3,
    flip_A4, flip_B4, flip_C4, flip_D4, flip_E4, flip_F4, flip_G4, flip_H4,
    flip_A5, flip_B5, flip_C5, flip_D5, flip_E5, flip_F5, flip_G5, flip_H5,
    flip_A6, flip_B6, flip_C6, flip_D6, flip_E6, flip_F6, flip_G6, flip_H6,
    flip_A7, flip_B7, flip_C7, flip_D7, flip_E7, flip_F7, flip_G7, flip_H7,
    flip_A8, flip_B8, flip_C8, flip_D8, flip_E8, flip_F8, flip_G8, flip_H8,
    flip_pass]

if __name__ == '__main__': main()
